#include "Disabler.h"
#include "../pch.h"

using namespace std;
Disabler::Disabler() : IModule(0, Category::EXPLOIT, "Disables certain anticheat checks") {
    registerEnumSetting("Mode", &mode, 0);
    mode.addEntry("Flareon", 0);
    mode.addEntry("PingSpoof", 1);
    mode.addEntry("Sentinel", 2);
}

const char* Disabler::getRawModuleName() {
    return "Disabler";
}

const char* Disabler::getModuleName() {
    name = string("Disabler ") + string(GRAY) + mode.GetEntry(mode.getSelectedValue()).GetName();
    return name.c_str();
}

void Disabler::onEnable() {
    tick = 0;
}

void Disabler::onTick(C_GameMode* gm) {
    auto player = g_Data.getLocalPlayer();
    if (player == nullptr) return;
    tick++;

    switch (mode.getSelectedValue()) {
    case 1: // SilentPingSpoof/handler
    {
        NetworkLatencyPacket Net;
        Net.timeStamp = 10;
        g_Data.getClientInstance()->loopbackPacketSender->sendToServer(&Net) / 0.1;
        break;
    }
    case 0:
        gm->attack(player);
        break;
    }
}

void Disabler::onMove(C_MoveInputHandler* input) {
    auto player = g_Data.getLocalPlayer();
    if (player == nullptr) return;

    if (mode.getSelectedValue() == 2)
    {
        C_MovePlayerPacket* packet = &C_MovePlayerPacket(g_Data.getLocalPlayer(), *g_Data.getLocalPlayer()->getPos());
        packet->mode = 2;
        packet->onGround = true;
        packet->tick = rand() % 1000000 + 1000985;
        for (int i = 0; i < 20; i++)
        {
            g_Data.getClientInstance()->loopbackPacketSender->sendToServer(packet);
        }
    }
}

void Disabler::onSendPacket(C_Packet* packet) {
    C_GameSettingsInput* input = g_Data.getClientInstance()->getGameSettingsInput();
    auto player = g_Data.getLocalPlayer();
    if (player == nullptr) return;

    auto scaffold = moduleMgr->getModule<Scaffold>();
    auto flight = moduleMgr->getModule<Flight>();
    auto speed = moduleMgr->getModule<Speed>();

    vec3_t pos = *player->getPos();
    double mathGroundRand = round(pos.y / 0.015625) * randomFloat(0.015625, 0.015629);
    float velocityxz = g_Data.getLocalPlayer()->velocity.magnitudexz();
    double mathGroundFly = round(pos.y / 0.015625) * 0.015645;
    double mathGround = round(pos.y / 0.015625) * 0.015625;
}
